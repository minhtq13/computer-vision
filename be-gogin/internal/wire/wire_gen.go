// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"be-gogin/internal/databases"
	"be-gogin/internal/databases/repository"
	"be-gogin/internal/databases/tracers"
	controllers4 "be-gogin/internal/domains/auth/controllers"
	postgres2 "be-gogin/internal/domains/auth/repositories/postgres"
	impls3 "be-gogin/internal/domains/auth/services/impls"
	controllers2 "be-gogin/internal/domains/messaging/controllers"
	controllers3 "be-gogin/internal/domains/notification/controllers"
	impls2 "be-gogin/internal/domains/notification/services/impls"
	"be-gogin/internal/domains/user/controllers"
	"be-gogin/internal/domains/user/repositories/postgres"
	"be-gogin/internal/domains/user/services/impls"
	"be-gogin/internal/initializers"
	"be-gogin/internal/messaging/confluent"
	"be-gogin/internal/messaging/handlers"
	"be-gogin/internal/messaging/segmenio"
	"be-gogin/internal/middlewares"
	"be-gogin/internal/routers"
	"be-gogin/internal/server"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeServer() (*server.Server, error) {
	appEnvConfig := initializers.NewAppConfig()
	logger := initializers.NewLogger()
	sqlQueryTracer := tracers.NewSqlQueryTracer(logger)
	loggerInterface := tracers.NewGormLogger(logger)
	postgresGormMaster := initializers.NewPostgresGormMaster(loggerInterface)
	postgresGormSlave := initializers.NewPostgresGormSlave(loggerInterface)
	postgresGormConnection := initializers.NewPostgresGormConnection(logger, postgresGormMaster, postgresGormSlave)
	postgresSqlcMaster := initializers.NewSqlcPostgresMaster(sqlQueryTracer)
	postgresSqlcSlave := initializers.NewSqlcPostgresSlave(sqlQueryTracer)
	postgresSqlcConnection := initializers.NewPostgresSqlcConnection(logger, postgresSqlcMaster, postgresSqlcSlave)
	databaseManager := databases.NewDatabaseManager(postgresGormConnection, postgresSqlcConnection)
	client := initializers.NewRedisConnection()
	mongoClient := initializers.NewMongoConnection()
	kafkaSegIOProducer := segmenio.NewKafkaSegIOProducer(appEnvConfig)
	kafkaSegIOConsumer := segmenio.NewKafkaSegIOConsumer(appEnvConfig)
	kafkaConfluentProducerManager, err := confluent.NewKafkaConfluentProducerManager(appEnvConfig)
	if err != nil {
		return nil, err
	}
	kafkaConfluentConsumerManager := confluent.NewKafkaConfluentConsumerManager(appEnvConfig)
	firebase := initializers.NewFirebase(appEnvConfig)
	helloController := server.NewHelloController()
	commonPGRepository := repository.NewCommonPGRepository(postgresGormConnection, postgresSqlcConnection)
	iUserPGRepository := postgres.NewUserPGRepository(postgresGormConnection, postgresSqlcConnection)
	iAuthInfoPGRepository := postgres2.NewAuthInfoPGRepository(postgresGormConnection)
	iUserService := impls.NewUserService(commonPGRepository, iUserPGRepository, iAuthInfoPGRepository)
	userController := controllers.NewUserController(iUserService)
	messagingController := controllers2.NewMessagingController(kafkaSegIOProducer, kafkaConfluentProducerManager)
	iNotificationService := impls2.NewNotificationService(firebase)
	notificationController := controllers3.NewNotificationController(iNotificationService)
	logKafkaMessageHandler := handlers.NewLogKafkaMessageHandler()
	iAuthenticationService := impls3.NewAuthenticationService(commonPGRepository, iUserPGRepository, iAuthInfoPGRepository, client, mongoClient)
	authenticationMiddleware := middlewares.NewAuthenticationMiddleware(iAuthenticationService)
	authenticationController := controllers4.NewAuthenticationController(iAuthenticationService)
	privateRouterGroup := routers.NewPrivateRouterGroup(authenticationMiddleware, databaseManager, userController, messagingController, authenticationController, notificationController)
	publicRouterGroup := routers.NewPublicRouterGroup(databaseManager, authenticationController)
	rootRouterGroup := routers.NewRootRouterGroup(privateRouterGroup, publicRouterGroup)
	serverServer := server.NewServer(appEnvConfig, logger, sqlQueryTracer, postgresGormConnection, postgresSqlcConnection, databaseManager, client, mongoClient, kafkaSegIOProducer, kafkaSegIOConsumer, kafkaConfluentProducerManager, kafkaConfluentConsumerManager, firebase, helloController, userController, messagingController, notificationController, logKafkaMessageHandler, authenticationMiddleware, rootRouterGroup)
	return serverServer, nil
}

// wire.go:

// Set of Postgres Repository
var PGRepositoryProvidedSet = wire.NewSet(repository.NewCommonPGRepository, wire.Bind(new(repository.IRepository), new(*repository.CommonPGRepository)), postgres.NewUserPGRepository, postgres2.NewAuthInfoPGRepository)

var ServiceProvidedSet = wire.NewSet(impls3.NewAuthenticationService, impls.NewUserService, impls2.NewNotificationService)

var MiddlewareProviderSet = wire.NewSet(middlewares.NewAuthenticationMiddleware)

var ControllerProvidedSet = wire.NewSet(controllers.NewUserController, controllers4.NewAuthenticationController, controllers2.NewMessagingController, controllers3.NewNotificationController)

var PrivateRouterProvidedSet = wire.NewSet(routers.NewPrivateRouterGroup)

var PublicRouterProvidedSet = wire.NewSet(routers.NewPublicRouterGroup)

var KafkaMessageHandlerProvidedSet = wire.NewSet(handlers.NewLogKafkaMessageHandler)
